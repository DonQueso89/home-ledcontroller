const SERVER_URL = document.currentScript.getAttribute("server-url");
const WEBSOCKET_URL = document.currentScript.getAttribute("websocket-url");

async function ledOn(n, r, g, b) {
  const url = `${SERVER_URL}state/${n}/on/`;
  const response = await fetch(url, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({ r, g, b }),
  });
  if (!response.ok) {
    alert("Error while switching on led");
  }
}

async function ledOff(n) {
  const url = `${SERVER_URL}state/${n}/off/`;
  const response = await fetch(url, {
    method: "POST",
  });
  if (!response.ok) {
    alert("Error while switching off led");
  }
}

async function fill(r, g, b) {
  const url = `${SERVER_URL}state/fill/`;
  const response = await fetch(url, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({ r, g, b }),
  });
  if (!response.ok) {
    alert("Error while filling leds");
  }
}

async function clear() {
  const url = `${SERVER_URL}state/clear/`;
  const response = await fetch(url, {
    method: "POST",
  });
  if (!response.ok) {
    alert("Error while clearing leds");
  }
}

function isOn(element) {
  return !(element.style.backgroundColor === "rgb(0, 0, 0)");
}

async function handleElementOn(e) {
  await ledOn(e.target.dataset.ledIndex, ...getColor());
}

async function handleElementOff(e) {
  e.preventDefault();
  await ledOff(e.target.dataset.ledIndex);
}

async function handleFill(e) {
  const rgb = getColor();
  await fill(...rgb);
}

async function handleClear(e) {
  await clear();
}

function getColor() {
  // Get selected color as RGB triplet
  const color = document.getElementById("colorpicker").value.replace("#", "");
  return [
    parseInt(color.slice(0, 2), 16),
    parseInt(color.slice(2, 4), 16),
    parseInt(color.slice(4), 16),
  ];
}

function initialize() {
  document.querySelectorAll(".matrix-element").forEach((elem) => {
    elem.addEventListener("click", handleElementOn);
    elem.addEventListener("contextmenu", handleElementOff);
  });
  document.getElementById("fill-button").addEventListener("click", handleFill);
  document
    .getElementById("clear-button")
    .addEventListener("click", handleClear);

  var ws = new WebSocket(WEBSOCKET_URL);
  ws.onopen = () => {
    ws.send("client ready");
  };

  // LED events can be generated by any source, therefore we handle
  // state changes by listening on a websocket which relays all
  // LED state change events.
  ws.onmessage = function (e) {
    const [ledNo, r, g, b] = e.data.replaceAll(" ", "").split(",");
    // display transparent when rgb == (0,0,0) == OFF
    var opacity = 1;
    if ([r,g,b].map(x => parseInt(x) || 0).reduce((a,e) => a+e) === 0) {
      opacity = 0;
    }
    document.getElementById(
      `element${ledNo}`
    ).style.backgroundColor = `rgb(${r}, ${g}, ${b}, ${opacity})`;
  };
}

document.addEventListener("DOMContentLoaded", function () {
  initialize();
});
